<div class="my-main-body-button">
    <span class="my-main-body-title">
        <i class="el-icon-view"></i>
        角色管理
    </span>
    <el-button v-if="existButton('Add')" type="primary" @@click="handleAdd()"><i class="el-icon-plus"></i> {{getButtonText('Add')}}</el-button>
    <el-button v-if="existButton('DeleteList')" type="danger" @@click="handleDeleteList()"><i class="el-icon-delete"></i> {{getButtonText('DeleteList')}}</el-button>
</div>
<el-table :data="List.Data"
          :row-key="getItemId"
          border stripe
          header-row-class-name="my-main-body-table-header"
          @@selection-change="handleSelectionChange"
          @@sort-change="function(sort){handleSortChange(sort,'List');}"
          style="width: 100%">
    <el-table-column type="selection" :selectable="setSelectable" width="55" align="center"
                     v-if="existButton('DeleteList')"></el-table-column>
    <el-table-column label="角色名称" prop="Name" sortable="custom"></el-table-column>
    <el-table-column label="排序" prop="OrderIndex" sortable="custom"></el-table-column>
    <el-table-column label="操作" width="180" align="center"
                     v-if="existButton('Edit') | existButton('Delete')">
        <template v-if="scope.row.Id > 1" slot-scope="scope">
            <el-button v-if="existButton('Edit')" size="mini" @@click="handleEdit(scope.$index, scope.row)"><i class="el-icon-edit"></i> {{getButtonText('Edit')}}</el-button>
            <el-button v-if="existButton('Delete')" size="mini" type="danger" @@click="handleDelete(scope.$index, scope.row)"><i class="el-icon-delete"></i> {{getButtonText('Delete')}}</el-button>
        </template>
    </el-table-column>
</el-table>

@Html.Partial("_pagination", "List")

@Html.Partial("Edit")

@section js{
    <script>
    function getVueOptions() {
        return helper.getPageVueOptions("Group", function () {
            return @Html.Raw(TypeHelper.ToJson<GroupDto>());
        }, {
            data: {
                NavigationList: []
            },
            mounted: function () {
                var _this = this;
                helper.apiPost(_this.getUrl("/Group/GetNavigationTreeList"), null, function (data) {
                    _this.NavigationList = data;
                })
            },
            computed: {
                allLeafKeys: function () {
                    return this.getArrayKeys(this.NavigationList);
                }
            },
            methods: {
                setSelectable: function (row, index) {
                    return row.Id > 1;
                },
                getTreeIcon: function (data) {
                    if (data.NavigationType == 1) {
                        return "el-icon-document";
                    }
                    var code = data.Code.toLowerCase();
                    if (code.search("view") >= 0) {
                        return "el-icon-view";
                    }
                    if (code.search("add") >= 0) {
                        return "el-icon-plus";
                    }
                    if (code.search("edit") >= 0) {
                        return "el-icon-edit";
                    }
                    if (code.search("delete") >= 0) {
                        return "el-icon-delete";
                    }
                    if (code.search("clear") >= 0) {
                        return "el-icon-delete";
                    }
                    if (code.search("import") >= 0) {
                        return "el-icon-upload2";
                    }
                    if (code.search("export") >= 0) {
                        return "el-icon-download";
                    }
                    if (code.search("restart") >= 0) {
                        return "el-icon-refresh";
                    }
                    if (code.search("backup") >= 0) {
                        return "el-icon-plus";
                    }
                    if (code.search("restore") >= 0) {
                        return "el-icon-back";
                    }
                    return "el-icon-question";
                },
                getArrayKeys: function (array) {
                    var _this = this;
                    var keys = [];
                    array.forEach(function(item) {
                        if (item.Children == null || item.Children.length == 0) {
                            keys.push(item.Id);
                            return;
                        }
                        _this.getArrayKeys(item.Children).forEach(function (key) {
                            keys.push(key);
                        });
                    });
                    return keys;
                },
                getSelectedLeafKeys: function (idList) {
                    return this.allLeafKeys.filter(item => idList.findIndex(o => o == item) >= 0);
                },
                resetTree: function (model) {
                    var selectedLeafKeys = this.getSelectedLeafKeys(model.NavigationIdList);
                    var tree = this.$refs.navigationTree;
                    tree && tree.setCheckedKeys(selectedLeafKeys);
                    return model;
                },
                handleAddBefore: function (model) {
                    return this.resetTree(model);
                },
                handleEditBefore: function (model) {
                    return this.resetTree(model);
                },
                submitFormBefore: function(formData){
                    this.List.ModelDialog.Model.NavigationIdList = this.getSelectedNavigationIdList();
                    return true;
                },
                getSelectedNavigationIdList: function () {
                    var tree = this.$refs.navigationTree;
                    return (tree.getCheckedKeys().concat(tree.getHalfCheckedKeys())).sort();
                }
            }
        });
    }
    </script>
}